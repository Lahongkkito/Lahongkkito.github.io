{"meta":{"title":"MJ's Study Note blog","subtitle":"Python & Machine Learning study blog","description":null,"author":"Lahongkkito","url":"https://Lahongkkito.github.io","root":"/"},"pages":[],"posts":[{"title":"03_conditions","slug":"03-conditions","date":"2019-09-19T06:57:42.000Z","updated":"2019-09-19T06:58:50.296Z","comments":true,"path":"2019/09/19/03-conditions/","link":"","permalink":"https://Lahongkkito.github.io/2019/09/19/03-conditions/","excerpt":"","text":"조건문 if, elif, else indentation(들여쓰기) 사용 nesting(반복 중첩) 가능 (비권장) boolean으로 표현 논리식 AND, OR, NOT 사용 가능 우선순위 NOT &gt; AND &gt; OR 예외 : 기본 타입 사용 가능 False 간주 값 (각 타입 기본값) None, 0, 0.0, “, (), [], {}, set() 이 외 모두 True Q. 숫자를 입력받아 아래 조건에 맞게 결과를 출력하세요. 3의 배수이면 fizz 5의 배수이면 buzz 15의 배수이면 fizzbuzz 이 외의 경우 입력받은 숫자 A. 12345678910num = int(input(\"Insert number: \"))if num % 15 ==0 : print(\"fizzbuzz\")elif num % 5 ==0 : print(\"buzz\")elif num % 3 ==0 : print(\"fizz\")else: print(num) 123456if num % 3 ==0 : print(\"fizz\", end=\"\")elif num % 5 ==0 : print(\"buzz\")if not((num % 3 ==0) or (num % 5 ==0)): print(num) 삼항연산 condition이 True이면 A를 리터, False니면 B를 리턴 A if (condition) else B Q. 숫자를 입력받아 짝수이면 “even”, 홀수이면 “odd”를 출력하세요. A. num = int(input(\"Insert number: \")) \"even\" if num % 2 == 0 else \"odd\"","categories":[{"name":"python","slug":"python","permalink":"https://Lahongkkito.github.io/categories/python/"}],"tags":[{"name":"if","slug":"if","permalink":"https://Lahongkkito.github.io/tags/if/"},{"name":"삼항연산","slug":"삼항연산","permalink":"https://Lahongkkito.github.io/tags/삼항연산/"}]},{"title":"02_operators","slug":"02-operators","date":"2019-09-17T05:51:58.000Z","updated":"2019-09-17T06:57:06.227Z","comments":true,"path":"2019/09/17/02-operators/","link":"","permalink":"https://Lahongkkito.github.io/2019/09/17/02-operators/","excerpt":"","text":"연산자 산술연산자+, -, *, /, //, %, ** 부동소수점 0.1 + 0.2 = 0.30000000000000004 해결 1 유효숫자 지정 (반올림) round(2.2) = 2 round(-3.8) = -4 해결 2 고정소수점 연산 : 십진법 연산 모듈, str 객체 생성, int 연산 가능 from decimal import Decimal float(Decimal(‘0.1’) + Decimal(‘0.2’)) = 0.3 해결 3 : fraction (분자, 분모) int/float 연산 가능 import fractions fractions.Fraction(5, 30) = Fraction(1, 6) fractions.Fraction(0.75) = Fraction(3, 4) a = fractions.Fraction(9, 28) a.numerator = 9 a.denominator = 28 해결 4 : math 모듈 import math math.ceil(4.3) = 5 비교연산자==, !=, &gt;, &lt;, &lt;=, &gt;= 할당연산자=, +=, -=, *=, /=, //=, %=, **= 비트연산자 2진수 연산 방식 bin() : 이진수 문자열로 변환 bin(5) = 0b101 0b10110 = 22 int(‘11101’, 2) = 29 &amp; : bit 단위로 and 연산 | : bit 단위로 or 연산 ^ : bit 단위로 xor 연산 ~ : bit 단위로 not 연산 (1의 보수) &lt;&lt;/&gt;&gt; bit 단위로 왼/오른쪽 비트단위 밀기 연산 양수는 0, 음수는 1 채워짐 왼쪽/오른쪽 shift 마다 2^n 곱한/나눈 효과 bin(0b10101 &amp; 0b11100) = 0b101000b10101 &amp; 0b11100 = 28 &amp; 21 = 20 bin(0b10101 | 0b11100) = 0b111010b10101 | 0b11100 = 28 | 21 = 29 bin(0b10101 ^ 0b11100) = 0b10010b10101 ^ 0b11100 = 28 ^ 21 = 9 bin(~0b10101) = -0b10110~0b10101 = -22~28 = -29 논리연산자 and : 둘 다 참일 때 참 or : 둘 중 하나 참일 때 참 not : 참이면 거짓, 거짓이면 참 멤버연산자 in : list 내에 포함되어 있으면 참 not in : list 내에 포함되어 있지 않으면 참 식별연산자 is : 개체메모리 위치나 값이 같으면 참 is not : 개체메모리 위치나 값지 않으면 참","categories":[{"name":"python","slug":"python","permalink":"https://Lahongkkito.github.io/categories/python/"}],"tags":[{"name":"연산자","slug":"연산자","permalink":"https://Lahongkkito.github.io/tags/연산자/"}]},{"title":"01_datatype","slug":"01-datatype","date":"2019-09-16T08:15:28.000Z","updated":"2019-09-17T06:54:30.094Z","comments":true,"path":"2019/09/16/01-datatype/","link":"","permalink":"https://Lahongkkito.github.io/2019/09/16/01-datatype/","excerpt":"","text":"종류 Numbers 정수형 : int 실수형(소수) : float 복소수 : complex (2+3j) 123a, b, c, d, e, f = 5, 0.12, -6.0, -6, 0, 0.0type(a), type(b), type(c), type(d), type(e), type(f)(int, float, float, int, int, float) Boolean True/False 0을 제외한 숫자 True, 문자 True String1s = \"AaBb ccc DD \" 문자열 &quot;, &#39; 구분없이 사용 &quot;&quot;&quot;, &#39;&#39;&#39; 세 개 사용으로 멀티라인 escape string \\n: new line \\t: tap 대문자/소문자 변환 함수 12s.upper() = 'AABB CCC DD 's.lower() = 'aabb ccc dd ' 해당 값의 위치 찾기 12s.find(\"ccc\") = 5 # 중복될 경우 가장 처음, 없을 경우 -1 반환s.index(\"b\") = 3 # 없을 경우 error 포함된 개수 리턴 1s.count(\"x\") = 0 공백 제거 123s.lstrip() = 'AaBb ccc DD ' # 왼쪽 공백 제거s.rstrip() = 'AaBb ccc DD' # 오른쪽 공백 제거s.strip() = 'AaBb ccc DD' # 양쪽 공백 제거 문자열 변환 12s.replace(\"c\", \"k\") = 'AaBb kkk DD 's.replace(\" \", \"\") = s.replace(\" \", \"\") # 중간 공백 제거 가능 체이닝 123s = \"this is a peach!!\"s.endswith(\"peach!!\") = Trues.endswith(\"peach\") = False string format 123a, b = 123, \"python\"\"&#123;&#125;,&#123;&#125;\".format(a, b)) = '123, python'\"&#123;str_&#125;, &#123;num&#125;\".format(num=a, str_=b)) = 'python, 123' List1ls = ['a', 100, [1, \"k\"]] iterable 여러 자료형 함께 저장 가능 수열 리스트 12list(range(5)) = [0, 1, 2, 3, 4]list(range(3, 10, 2)) = [3, 5, 7, 9] 자료 수정 12ls[1] = 50ls = ['a', 50, [1, \"k\"]] 자료 추가 123ls.append(\"plus\") = ['a', 100, [1, 'k'], 'plus']ls.insert(0, \"insert\") = ['insert', 'a', 100, [1, 'k'], 'plus'] 자료 삭제 123ls.pop() = 'plus'ls.remove('a') = [100, [1, 'k']] # index 값이 가장 작은 데이터 한개만 삭제del ls[2] = ['a', 100] 졍렬 ls.sort() # 동일한 타입의 경우만 가능 ls.sort(key=len) ls.reverse() offset 인덱스/슬라이싱 1234567slic = \"I want some TTEOKBOKKI!\"`slic[7:11] = 'some'slic[3:15:2] = 'atsm TOBK'slic[::2] = 'Iwn oeTEKOK!'slic[::-1] = '!IKKOBKOETT emos tnaw I'slic.split(\"O\") = ['I want some TTE', 'KB', 'KKI!'] 복사 얕은복사 : 주소값만 복사 깊은복사 : 메모리 복사 5) Tuple iterable 데이터 수정 불가능 리스트보다 적은 메모리 사용123456tp1 = 1, 2, 3tp2 = \"a\", \"b\"tp3 = (1, \"b\")tp1, tp2, tp3, type(tp1)((1, 2, 3), ('a', 'b'), (1, 'b'), tuple) 6) Dictionary 데이터 순서 없음 key 내부적으로 hash값으로 지정 str,int만 가능 key : value {key1:value2, key2:value2} 123456dic = &#123; 1: \"one\", \"A\": [\"data\", \"python\"], \"숫자\": 1234, 2: \"two\",&#125; 호출 1234567dic.keys() = dict_keys([1, 'A', '숫자', 2])dic.values() = dict_values(['one', ['data', 'python'], 1234, 'two'])dic.items() = dict_items([(1, 'one'), ('A', ['data', 'python']), ('숫자', 1234), (2, 'two')])dic.get(\"A\") = ['data', 'python']dic[\"숫자\"] = 12342 in dic = False\"two\" in dic = True # key값 존재 확인 자료 추가 12dic[\"key3\"] = 40dic = &#123;1: 'one', 'A': ['data', 'python'], '숫자': 1234, 2: 'two', 'key3': 40&#125; 자료 삭제 12del dic[\"key3\"]dic.clear() = &#123;&#125; update (덮어쓰기) 1234dic1 = &#123;1: \"a\", 2: \"b\"&#125;dic2 = &#123;3: \"d\", 2: \"c\"&#125;dic1.update(dic2)dic1 = &#123;1: 'a', 2: 'c', 3: 'd'&#125; 7) Set 중복 데이터 없음 교집합, 합집합, 차집합 연산 가능 수정 불가능(리스트 형변환) 12a_set = set([\"A\", \"B\", \"C\", \"D\",])b_set = set([\"C\", \"D\", \"E\", \"F\", \"G\",]) 합집합 a_set | b_set a_set.union(b_set) 교집합 a_set &amp; b_set a_set.intersection(b_set) 차집합 a_set - b_set a_set.difference(b_set) 대칭차집합 a_set ^ b_set 부분집합 a_set.issubset(b_set) = False 데이터 타입 변경문자/숫자 변환12string = \"1234\"number = int(string) boolean형 변환12bool(\"\"), bool(\"data\"), bool(-1), bool(0), bool(23)(False, True, True, False, True ) 문자열/리스트 변환1234567string = \"ABCD\"ls = [ 3,\"f\",\"g\",]list(string) = ['A', 'B', 'C', 'D']str(ls) = \"[3, 'f', 'g'] # 문장의 경우 string.split(\" \") 또는 \" \".join(ls)로 가능 튜플/딕셔너리 변환12345tp = ((1,\"one\"),(2,\"two\"))dic = &#123;3:\"three\", 4:\"four\"&#125;dict(tp) = &#123;1: 'one', 2: 'two'&#125;tuple(dic) = (3, 4)","categories":[{"name":"python","slug":"python","permalink":"https://Lahongkkito.github.io/categories/python/"}],"tags":[{"name":"datatype","slug":"datatype","permalink":"https://Lahongkkito.github.io/tags/datatype/"},{"name":"string","slug":"string","permalink":"https://Lahongkkito.github.io/tags/string/"},{"name":"list","slug":"list","permalink":"https://Lahongkkito.github.io/tags/list/"},{"name":"tuple","slug":"tuple","permalink":"https://Lahongkkito.github.io/tags/tuple/"},{"name":"set","slug":"set","permalink":"https://Lahongkkito.github.io/tags/set/"}]},{"title":"00_basic","slug":"00-basic","date":"2019-09-16T08:10:06.000Z","updated":"2019-09-17T06:55:13.477Z","comments":true,"path":"2019/09/16/00-basic/","link":"","permalink":"https://Lahongkkito.github.io/2019/09/16/00-basic/","excerpt":"","text":"Python Basic Syntax PEP PEP20 : 파이썬의 정신, 철학, 혼 PEP8 : 파이썬 코딩 스타일 가이드 1import this The Zen of Python, by Tim PetersBeautiful is better than ugly.Explicit is better than implicit.Simple is better than complex.Complex is better than complicated.Flat is better than nested.Sparse is better than dense.Readability counts.Special cases aren’t special enough to break the rules.Although practicality beats purity.Errors should never pass silently.Unless explicitly silenced.In the face of ambiguity, refuse the temptation to guess.There should be one– and preferably only one –obvious way to do it.Although that way may not be obvious at first unless you’re Dutch.Now is better than never.Although never is often better than right now.If the implementation is hard to explain, it’s a bad idea.If the implementation is easy to explain, it may be a good idea.Namespaces are one honking great idea – let’s do more of those! comment (주석) 가장 앞에 #을 붙이면 해당 라인의 코드는 실행 되지 않음 테스트를 위해 중간에 코드를 실행하지 않거나 코드에 대한 간략한 설명을 할때 사용 단축키 cmd(ctrl) + / 변수 변수를 선언하면 메모리에 데이터를 저장하기 위한 저장공간 생성 식별자 변수, 함수, 클래스, 모듈 등을 구분하기 위해서 사용하는 이름 대소문자 구분 _를 제외한 특수문자 사용 불가 가장앞에 __ 사용은 지양 가장앞에 숫자 사용 불가능 예약어(for, while, if, class 등) 사용 불가능 변수, 함수 : 소문자 스네이크 케이스 (snake_case) 클래스 : 대문자 카멜 케이스 (CamelCase) print (출력) 해당 변수의 값을 출력 , 로 여러 변수를 나열하면 한줄에 출력 기본적으로 한칸 띄어쓰기 후 출력1234a = 4b = 7print(a, b, 10, 100, sep='*', end='!!') = 4*7*10*100!!","categories":[{"name":"python","slug":"python","permalink":"https://Lahongkkito.github.io/categories/python/"}],"tags":[{"name":"PEP","slug":"PEP","permalink":"https://Lahongkkito.github.io/tags/PEP/"}]}]}