{"meta":{"title":"MJ's Study Note blog","subtitle":"Python & Machine Learning study blog","description":null,"author":"Lahongkkito","url":"https://Lahongkkito.github.io","root":"/"},"pages":[],"posts":[{"title":"01_datatype","slug":"01-datatype","date":"2019-09-16T08:15:28.000Z","updated":"2019-09-16T12:02:36.014Z","comments":true,"path":"2019/09/16/01-datatype/","link":"","permalink":"https://Lahongkkito.github.io/2019/09/16/01-datatype/","excerpt":"","text":"종류 Numbers 정수형 : int 실수형(소수) : float 복소수 : complex (2+3j) 123a, b, c, d, e, f = 5, 0.12, -6.0, -6, 0, 0.0type(a), type(b), type(c), type(d), type(e), type(f)(int, float, float, int, int, float) Boolean True/False 0을 제외한 숫자 True, 문자 True String 문자열 &quot;, &#39; 구분없이 사용 &quot;&quot;&quot;, &#39;&#39;&#39; 세 개 사용으로 멀티라인 escape string \\n: new line \\t: tap s = &quot;AaBb ccc DD &quot; 대문자/소문자 변환 함수 12s.upper() = &apos;AABB CCC DD &apos;s.lower() = &apos;aabb ccc dd &apos; 해당 값의 위치 찾기 s.find(“ccc”) = 5 # 중복될 경우 가장 처음, 없을 경우 -1 반환 s.index(“b”) = 3 # 없을 경우 error 포함된 개수 리턴 s.count(“x”) = 0 공백 제거 123s.lstrip() = 'AaBb ccc DD ' # 왼쪽 공백 제거s.rstrip() = 'AaBb ccc DD' # 오른쪽 공백 제거s.strip() = 'AaBb ccc DD' # 양쪽 공백 제거 문자열 변환 \"k\") 1- ```s.replace(&quot; &quot;, &quot;&quot;) = s.replace(&quot; &quot;, &quot;&quot;) # 중간 공백 제거 가능 체이닝 123s = \"this is a peach!!\"s.endswith(\"peach!!\") = Trues.endswith(\"peach\") = False string format 123a, b = 123, &quot;python&quot; &quot;&#123;&#125;,&#123;&#125;&quot;.format(a, b)) = &apos;123, python&apos; &#123;str_&#125;, &#123;num&#125;&quot;.format(num=a, str_=b)) = &apos;python, 123&apos; 4) List iterable 여러 자료형 함께 저장 가능 수열 리스트 1```list(range(3, 10, 2)) = [3, 5, 7, 9] ls = [&#39;a&#39;, 100, [1, &quot;k&quot;]] 자료 수정 ls[1] = 50 -&gt; ls = [‘a’, 50, [1, “k”]] 자료 추가 ls.append(“plus”) -&gt; ls = [‘a’, 100, [1, ‘k’], ‘plus’] ls.insert(0, “insert”) -&gt; ls = [‘insert’, ‘a’, 100, [1, ‘k’], ‘plus’] 자료 삭제 ls.pop() = ‘plus’ ls.remove(‘a’) -&gt; ls = [100, [1, ‘k’]] index 값이 가장 작은 데이터 한개만 삭제 del ls[2] -&gt; ls = [‘a’, 100] 졍렬 ls.sort() 동일한 타입의 경우만 가능 ls.sort(key=len) ls.reverse() offset 인덱스/슬라이싱 slic = &quot;I want some TTEOKBOKKI!&quot; slic[7:11] = ‘some’ slic[3:15:2] = ‘atsm TOBK’ slic[::2] = ‘Iwn oeTEKOK!’ slic[::-1] = ‘!IKKOBKOETT emos tnaw I’ slic.split(“O”) = [‘I want some TTE’, ‘KB’, ‘KKI!’] 복사 얕은복사 : 주소값만 복사 깊은복사 : 메모리 복사 5) Tuple iterable 데이터 수정 불가능 리스트보다 적은 메모리 사용12345tp1 = 1, 2, 3tp2 = \"a\", \"b\"tp3 = (1, \"b\")tp1, tp2, tp3, type(tp1)((1, 2, 3), ('a', 'b'), (1, 'b'), tuple) 6) Dictionary 데이터 순서 없음 key 내부적으로 hash값으로 지정 str,int만 가능 key : value {key1:value2, key2:value2} 123456dic = &#123; 1: \"one\", \"A\": [\"data\", \"python\"], \"숫자\": 1234, 2: \"two\",&#125; 호출 dic.keys() = dict_keys([1, ‘A’, ‘숫자’, 2]) dic.values() = dict_values([‘one’, [‘data’, ‘python’], 1234, ‘two’]) dic.items() = dict_items([(1, ‘one’), (‘A’, [‘data’, ‘python’]), (‘숫자’, 1234), (2, ‘two’)]) dic.get(“A”) = [‘data’, ‘python’] dic[“숫자”] = 1234 2 in dic = False “two” in dic = True key값 존재 확인 자료 추가 dic[“key3”] = 40 -&gt; dic = {1: ‘one’, ‘A’: [‘data’, ‘python’], ‘숫자’: 1234, 2: ‘two’, ‘key3’: 40} 자료 삭제 del dic[“key3”] dic.clear() -&gt; dic = {} update (덮어쓰기) 123dic1 = &#123;1: \"a\", 2: \"b\"&#125;dic2 = &#123;3: \"d\", 2: \"c\"&#125;dic1.update(dic2) -&gt; dic1 = &#123;1: 'a', 2: 'c', 3: 'd'&#125; 7) Set 중복 데이터 없음 교집합, 합집합, 차집합 연산 가능 수정 불가능(리스트 형변환) 12a_set = set([\"A\", \"B\", \"C\", \"D\",])b_set = set([\"C\", \"D\", \"E\", \"F\", \"G\",]) 합집합 a_set | b_set, a_set.union(b_set) 교집합 a_set &amp; b_set, a_set.intersection(b_set) 차집합 a_set - b_set, a_set.difference(b_set) 대칭차집합 a_set ^ b_set 부분집합 a_set.issubset(b_set) = False 데이터 타입 변경문자/숫자 변환12string = \"1234\"number = int(string) boolean형 변환12bool(\"\"), bool(\"data\"), bool(-1), bool(0), bool(23)(False, True, True, False, True ) 문자열/리스트 변환12345string = \"ABCD\"ls = [\"e\",\"f\",\"g\",]list(string)str(ls)# 문장의 경우 string.split(\" \") 또는 \" \".join(ls)로 가능 튜플/딕셔너리 변환1234tp = ((1,\"one\"),(2,\"two\"))dic = &#123;3:\"three\", 4:\"four\"&#125;dict(tp)tuple(dic)","categories":[{"name":"python","slug":"python","permalink":"https://Lahongkkito.github.io/categories/python/"}],"tags":[{"name":"datatype","slug":"datatype","permalink":"https://Lahongkkito.github.io/tags/datatype/"},{"name":"string","slug":"string","permalink":"https://Lahongkkito.github.io/tags/string/"},{"name":"list","slug":"list","permalink":"https://Lahongkkito.github.io/tags/list/"},{"name":"tuple","slug":"tuple","permalink":"https://Lahongkkito.github.io/tags/tuple/"},{"name":"set","slug":"set","permalink":"https://Lahongkkito.github.io/tags/set/"}]},{"title":"00_basic","slug":"00-basic","date":"2019-09-16T08:10:06.000Z","updated":"2019-09-16T08:22:04.674Z","comments":true,"path":"2019/09/16/00-basic/","link":"","permalink":"https://Lahongkkito.github.io/2019/09/16/00-basic/","excerpt":"","text":"Python Basic Syntax PEP PEP20 : 파이썬의 정신, 철학, 혼 PEP8 : 파이썬 코딩 스타일 가이드 1import this The Zen of Python, by Tim PetersBeautiful is better than ugly.Explicit is better than implicit.Simple is better than complex.Complex is better than complicated.Flat is better than nested.Sparse is better than dense.Readability counts.Special cases aren’t special enough to break the rules.Although practicality beats purity.Errors should never pass silently.Unless explicitly silenced.In the face of ambiguity, refuse the temptation to guess.There should be one– and preferably only one –obvious way to do it.Although that way may not be obvious at first unless you’re Dutch.Now is better than never.Although never is often better than right now.If the implementation is hard to explain, it’s a bad idea.If the implementation is easy to explain, it may be a good idea.Namespaces are one honking great idea – let’s do more of those! comment (주석) 가장 앞에 #을 붙이면 해당 라인의 코드는 실행 되지 않음 테스트를 위해 중간에 코드를 실행하지 않거나 코드에 대한 간략한 설명을 할때 사용 단축키 cmd(ctrl) + / 변수 변수를 선언하면 메모리에 데이터를 저장하기 위한 저장공간 생성 식별자 변수, 함수, 클래스, 모듈 등을 구분하기 위해서 사용하는 이름 대소문자 구분 _를 제외한 특수문자 사용 불가 가장앞에 __ 사용은 지양 가장앞에 숫자 사용 불가능 예약어(for, while, if, class 등) 사용 불가능 변수, 함수 : 소문자 스네이크 케이스 (snake_case) 클래스 : 대문자 카멜 케이스 (CamelCase) print (출력) 해당 변수의 값을 출력 , 로 여러 변수를 나열하면 한줄에 출력 기본적으로 한칸 띄어쓰기 후 출력1234a = 4b = 7print(a, b, 10, 100, sep='*', end='!!')4*7*10*100!!","categories":[{"name":"python","slug":"python","permalink":"https://Lahongkkito.github.io/categories/python/"}],"tags":[{"name":"PEP","slug":"PEP","permalink":"https://Lahongkkito.github.io/tags/PEP/"}]}]}